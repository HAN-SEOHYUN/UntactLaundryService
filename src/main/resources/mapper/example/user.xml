<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
         "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ez.launer.user.model.UserDAO">
   <!-- 일반 회원가입 -->
   <insert id="insertUser" parameterType="userAllVo" >
      <selectKey order="BEFORE" keyProperty="no" resultType="int">
         select users_seq.nextval from dual
      </selectKey>
         insert into users(no,user_code,name,email,pwd,hp,start_date,point)
         values(#{no},#{userCode},#{name},#{email},#{pwd},#{hp},sysdate,#{point}) 
   </insert>
   <!-- 가입시 주소 입력 -->
   <insert id="insertAddress" parameterType="userAllVo" >
      <selectKey order="BEFORE" keyProperty="addressNo" resultType="int">
         select users_address_seq.nextval from dual 
      </selectKey>
      insert into users_address(no, users_no, office_no, address, address_detail, zipcode,lon_x,lat_y,entermethod)
      values(#{addressNo}, #{no}, #{officeNo}, #{address}, #{addressDetail}, #{zipcode}, #{lonX}, #{latY}, #{entermethod})
   </insert>
   <!-- 배송기사 회원가입 -->
   <insert id="insertDriver" parameterType="driverAllVo" >
      <selectKey order="BEFORE" keyProperty="no" resultType="int">
         select delivery_driver_seq.nextval from dual
      </selectKey>
         insert into delivery_driver(no,users_class_no,office_no, name,email,pwd,hp,start_date)
         values(#{no},#{userCode},#{officeNo},#{name},#{email},#{pwd},#{hp},sysdate) 
   </insert>	
   <!-- 가입시 계좌 정보 입력 -->
   <insert id="insertAccount" parameterType="driverAllVo" >
      <selectKey order="BEFORE" keyProperty="accInfoNo" resultType="int">
         select account_info_seq.nextval from dual 
      </selectKey>
      insert into account_information(no, delivery_driver_no, bank, account_number, account_holder)
      values(#{accInfoNo}, #{no}, #{bank}, #{accNum}, #{accHolder})

   </insert>
   <!-- 이메일 중복 확인, 비밀번호찾기시 소셜계정 여부-->
   <select id="chkEmail" parameterType="String"  resultType="int">
      select count(*) from users where Email=#{email} and social_login_key is null
   </select>
   <select id="chkSocial" parameterType="String"  resultType="int">
      select count(*) from users where Email=#{email} and social_login_key is not null
   </select>
   <!-- 휴대전화 번호 중복 확인 -->
   <select id="chkHp" parameterType="String"  resultType="int">
      select count(*) from users where HP=#{hp} 
   </select>
   <!-- 배달기사 이메일 중복 확인 -->
   <select id="chkDmail" parameterType="String"  resultType="int">
      select count(*) from delivery_driver where Email=#{email} 
   </select>
   <!-- 배달기사 휴대전화 번호 중복 확인 -->
   <select id="chkDhp" parameterType="String"  resultType="int">
      select count(*) from delivery_driver where HP=#{hp} 
   </select>
   <!-- 일반회원 로그인 -->
   <select id="selectByEmail" parameterType="String"  resultType="userVo">
      select * from users where email=#{email}
   </select>
   <select id="selectPwd2" parameterType="String" resultType="String">
      select pwd from users
      where email=#{email} and out_date is null
   </select>
   <!-- 배달기사 로그인 -->
   <select id="selectByDmail" parameterType="String"  resultType="driverVo">
      select * from delivery_driver where email=#{dmail} 
   </select>
   <select id="selectPwd3" parameterType="String" resultType="String">
      select pwd from delivery_driver
      where email=#{dmail} and out_date is null
   </select>
   <!-- 일반회원 이메일 찾기 -->
   <select id="findEmail" parameterType="userVo" resultType="String">
		select email from users where name =#{name} and  hp=#{hp}
   </select>
   <!-- 배송기사 이메일 찾기 -->
   <select id="findDmail" parameterType="driverAllVo" resultType="String">
 		select email from delivery_driver where name =#{name} and  hp=#{hp}
   </select>
   <!-- 일반회원 비밀번호 찾기시 임시비밀번호로 수정 -->
   <update id="randomPwd" parameterType="userVo">
		update users
		set pwd=#{randomPwd}
		where name=#{name} and hp=#{hp} and email=#{email}
   </update>
   <!-- 배송기사 비밀번호 찾기시 임시 비밀번호로 수정 -->
   <update id="randomDpwd" parameterType="driverAllVo">
		update delivery_driver
		set pwd=#{randomPwd}
		where name=#{name} and hp=#{hp} and email=#{email}
   </update>
   <!-- 회원 정보 조회 -->
   <select id="selectById" parameterType="int" resultType="userVo">
      select * from users where no=#{no}
   </select>
   <!-- 회원 정보 조회 주소테이블 조인 -->
   <select id="selectByIdAddress" parameterType="int" resultType="hashMap">
      select u.*,a.address,a.entermethod,a.address_detail,a.zipcode,a.lon_x,a.lat_y,a.office_no
      from users u full outer join users_address a
	  on u.no=a.users_no
      where u.no=#{no}
   </select>
   <!-- 회원 탈퇴처리 -->
   <update id="deleteUser" parameterType="int">
      update users set out_date=sysdate
      where no=#{no}
   </update>
   
   <!-- 비밀번호 체크 -->
   <select id="selectPwd" parameterType="int" resultType="String">
      select pwd from users
      where no=#{no} and out_date is null
   </select>
   <!-- 회원정보 수정 (전화번호)  -->
   <update id="updateUserHp" parameterType="userVo">
      update users
      set hp=#{hp} where no=#{no}
   </update>
   <!-- 회원정보 수정(주소) -->
   <update id="updateUserAddress" parameterType="userAllVo">
      update users_address
      set address=#{address}, 
         address_detail=#{addressDetail}, 
         entermethod=#{entermethod}, 
         zipcode=#{zipcode},
         office_no = #{officeNo},
         lat_y=#{latY},lon_x=#{lonX}
      where users_no=#{no}
   </update>
   <!-- 비밀번호 변경처리 -->
   <update id="editPwd" parameterType="userVo">
      update users 
      set pwd=#{pwd}
      where no=#{no}
   </update>

   <select id="selectDeliveryUser">
      select * from DELIVERY_DRIVER
   </select>


<!-- 회원정보 수정(지점 변경처리) -->
	<select id="selectOffice" resultType="officeVo">
		select * from office
	</select>

	
	
	
	
	
	
	
	
	
<!--한서현 -->
	<!-- 카카오로그인 시 회원가입 (insert) -->
	<insert id="insertKakaoUser" parameterType="userVo">
		<selectKey keyProperty="no" resultType="int" order="BEFORE">
			select USERS_SEQ.nextval from dual
		</selectKey>
		insert into users (no,user_code,name,email,SOCIAL_LOGIN_KEY,SOCIAL_LOGIN_HOST,LAST_ACCESS_DATE,START_DATE,POINT)
		values(users_seq.nextval,1,#{name},#{email},#{socialLoginKey},'KAKAO',sysdate,sysdate,0)
	</insert>
	
	<!-- db존재여부 check -->
	<select id="accIsExist" parameterType="string" resultType="int">
		select count(*) as count
		from users
		where email = #{email}
	</select>
	<select id ="isAddressExist" parameterType="int" resultType ="int">	
		select count(*) from users_address where users_no = #{no} and OFFICE_NO is not null
	</select>
	<insert id="insertAddressOnlyPart" parameterType="userAddressVo">
		<selectKey order="BEFORE" keyProperty="no" resultType ="int">
		select users_address_seq.nextval from dual
		</selectKey>
			insert into users_address(no,users_no)
			values(#{no}, #{usersNo})
	</insert>
	
	<sql id="searchWhere">
		<if test="searchKeyword !=null and searchKeyword !=''">
        	where ${searchCondition} 
        		like '%' || #{searchKeyword} || '%'
        </if>
		<!-- <if test="searchKeyword =null and searchKeyword =''">
        	where out_date is null and user_code =1 
        </if>  서치가 안됨 !! -->
	</sql>
	
	
	<select id="selectUser" parameterType="UserSearchVO" resultType="userVo">
		       select * from USERS
		       <include refid="searchWhere"></include>
	</select>
	
	<select id="getUserTotalRecord" parameterType="searchVo" resultType="int">	
		select count(*) from USERS 
		<include refid="searchWhere"></include>
	</select>
	
	<insert id="insertBranchManager" parameterType="userVo">
	<selectKey order="BEFORE" keyProperty="no" resultType="int">
		select users_seq.nextval from dual
	</selectKey>
	 	 insert into users(no,user_code,name,email,pwd,hp,start_date)
         values(#{no},3,#{name},#{email},#{pwd},#{hp},sysdate)
	</insert>
	
	<!-- 탈퇴한회원만 보기 -->
	<select id="withdrawUsers" resultType="userVo">
		select * from users where out_date is not null
	</select>
	
	<!-- today check -->
	<insert id="insertToday" parameterType="map">
		insert into today(no,users_no,access_date)
		values(today_seq.nextval,#{usersNo},#{date})
	</insert>
	<update id="kakaoRejoin" parameterType ="userVo">
	  update users 
      set out_date= null
      where no=#{no}
	</update>










   <!--박권순 시작-->
   <!--박권순 시작-->
   <!--박권순 시작-->
   <!--박권순 시작-->
    <update id="socialReJoin" parameterType="int">
        update USERS
        set OUT_DATE = null
        where NO = #{no}
    </update>

   <insert id="insertSnsUser">
      <selectKey keyProperty="no" resultType="int" order="BEFORE">
         select USERS_SEQ.nextval from dual
      </selectKey>
      insert into USERS (NO, NAME, EMAIL, SOCIAL_LOGIN_KEY, SOCIAL_LOGIN_HOST, HP, LAST_ACCESS_DATE,
                         START_DATE)
      values (#{no}, #{name}, #{email}, #{socialLoginKey}, #{socialLoginHost}, #{hp}, sysdate, sysdate)
   </insert>

   <!--박권순 끝-->
   <!--박권순 끝-->
   <!--박권순 끝-->
   <!--박권순 끝-->







</mapper>